(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return d}));var a=n(3),i=n(7),s=(n(0),n(88)),r={title:"Event Handlers and Transitions"},c={unversionedId:"essentials/event-handlers-and-transitions",id:"essentials/event-handlers-and-transitions",isDocsHomePage:!1,title:"Event Handlers and Transitions",description:"State machines are all about responding to events and transitioning to new states. In Fini, this should feel effortless.",source:"@site/docs/essentials/event-handlers-and-transitions.md",slug:"/essentials/event-handlers-and-transitions",permalink:"/essentials/event-handlers-and-transitions",editUrl:"https://github.com/janovekj/fini/edit/master/site/docs/essentials/event-handlers-and-transitions.md",version:"current",sidebar:"docs",previous:{title:"Schema Definition",permalink:"/essentials/schema-definition"},next:{title:"The Machine Object",permalink:"/essentials/the-machine-object"}},o=[{value:"Changing states",id:"changing-states",children:[]},{value:"Updating context",id:"updating-context",children:[]},{value:"Event payloads",id:"event-payloads",children:[]},{value:"Executing side-effects",id:"executing-side-effects",children:[]},{value:"State life cycle effects",id:"state-life-cycle-effects",children:[]}],l={toc:o};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"State machines are all about responding to events and transitioning to new states. In Fini, this should feel effortless."),Object(s.b)("h2",{id:"changing-states"},"Changing states"),Object(s.b)("p",null,"Transitioning to a new state is simple. Showing is better than telling, so let's look at an example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"useMachine({\n  state1: {\n    event1: ({ update }) => update.state2(),\n  },\n  state2: {},\n});\n")),Object(s.b)("p",null,"That's all there's to it! The ",Object(s.b)("inlineCode",{parentName:"p"},"update")," object that is provided to our event handler function, has functions attached to it that will help us in creating state and context updates. It's important to note that this function only ",Object(s.b)("em",{parentName:"p"},"creates")," a new state, it does not actually update the state of our machine. This means that we must return the result for anything to actually happen."),Object(s.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"The event handler function should be ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Pure_function"}),"pure"),". If you need to perform side-effects, we'll talk about that in just a minute."))),Object(s.b)("h2",{id:"updating-context"},"Updating context"),Object(s.b)("p",null,"In addition to transitioning between states, an event may also update the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/essentials/schema-definition#context"}),"context"),":"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'useMachine({\n  state1: {\n    event1: ({ update }) =>\n      // Will create a context update while staying in the same state\n      update.state1({\n        someContextProperty: "some value",\n      }),\n  },\n});\n')),Object(s.b)("p",null,"If the next state you're transitioning to requires a different set of context properties, Fini will tell if something is missing when creating the update."),Object(s.b)("p",null,"It's also completely fine to not return nothing at all. This is often the case if you just want to run some side-effects, which we'll talk about later! If nothing is returned, nothing will be updated."),Object(s.b)("h2",{id:"event-payloads"},"Event payloads"),Object(s.b)("p",null,"A state machine would be quite useless if we couldn't pass along data with the events we're dispatching. If the event supports a payload, this is the second parameter passed into the event handler function:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"type CounterMachine = {\n  states: {\n    counting: {\n      events: {\n        setCount: number;\n      };\n    };\n  };\n  context: {\n    count: number;\n  };\n};\n\nuseMachine({\n  counting: {\n    setCount: ({ context }, newCount) => ({\n      count: newCount,\n    }),\n  },\n});\n")),Object(s.b)("h2",{id:"executing-side-effects"},"Executing side-effects"),Object(s.b)("p",null,"Event handler functions should be pure, so side-effects must be handled on Fini's terms. Luckily, this is also trivial. The functions defined on ",Object(s.b)("inlineCode",{parentName:"p"},"update")," also accepts a function which will be executed."),Object(s.b)("p",null,"In the following example, we'll create an update with ",Object(s.b)("inlineCode",{parentName:"p"},"fetchingUser")," as the next state, and define a side-effect that will run when the update is applied."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"useMachine({\n  idle: {\n    login: ({ context, update }, userId) => {\n      // highlight-start\n      update.fetchingUser(() => {\n        fetchUser(userId).then((user) => console.log(user));\n      });\n      // highlight-end\n    },\n  },\n  fetchingUser: {},\n});\n")),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"If the event handler should simply execute an effect without updating any state, you can simply call ",Object(s.b)("inlineCode",{parentName:"p"},"update")," directly with your function: ",Object(s.b)("inlineCode",{parentName:"p"},'update(() => console.log("Hi!"))')))),Object(s.b)("p",null,"The function passed into ",Object(s.b)("inlineCode",{parentName:"p"},"update")," also receives a dispatcher you can use to dispatch events from your side-effect, like in the example below:"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'useMachine({\n  idle: {\n    login: ({ context, update }, userId) => {\n      // highlight-start\n      update((dispatch) => {\n        fetchUser(userId).then((user) => dispatch.success(user));\n      });\n      // highlight-end\n      return "fetchingUser";\n    },\n  },\n  fetchingUser: {\n    success: ({ update }, user) =>\n      update.loggedIn({\n        user,\n      }),\n  },\n});\n')),Object(s.b)("p",null,"From your side-effect functions, you can also return a cleanup function, which will run when the current state is left, or when the React component is unmounted (similar to ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-effect.html#example-using-hooks-1"}),"how ",Object(s.b)("inlineCode",{parentName:"a"},"useEffect")," works"),")"),Object(s.b)("h2",{id:"state-life-cycle-effects"},"State life cycle effects"),Object(s.b)("p",null,"Sometimes you'll want to define effects that should run every time a state is entered or exited. Fini allows you to achieve this by specifying the special ",Object(s.b)("inlineCode",{parentName:"p"},"$entry")," and ",Object(s.b)("inlineCode",{parentName:"p"},"$exit")," events, respectively."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'useMachine(\n  {\n    state1: {\n      // will be run every time `state1` is entered\n      // is also run if state is the initial state\n      $entry: () => console.log("Entered state1"),\n\n      // will be run every time `state1` is exited\n      $exit: () => console.log("Exited state1"),\n    },\n  },\n  "state1"\n);\n')),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"$entry")," and ",Object(s.b)("inlineCode",{parentName:"p"},"$exit")," are pretty similar to regular event handler functions, except they don't return a new state. They are only for running effects, which is also why you don't need to wrap them in the ",Object(s.b)("inlineCode",{parentName:"p"},"update")," function - Fini will do that for you behind the scenes."),Object(s.b)("p",null,"Both functions also receive an object containing the current ",Object(s.b)("inlineCode",{parentName:"p"},"state"),", ",Object(s.b)("inlineCode",{parentName:"p"},"context")," and the ",Object(s.b)("inlineCode",{parentName:"p"},"dispatch")," function. Additionally, ",Object(s.b)("inlineCode",{parentName:"p"},"$entry")," receives ",Object(s.b)("inlineCode",{parentName:"p"},"previousState"),", and ",Object(s.b)("inlineCode",{parentName:"p"},"$exit")," receieves ",Object(s.b)("inlineCode",{parentName:"p"},"nextState"),"."))}d.isMDXComponent=!0},88:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),d=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,r=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=d(n),b=a,h=u["".concat(r,".").concat(b)]||u[b]||p[b]||s;return n?i.a.createElement(h,c(c({ref:t},l),{},{components:n})):i.a.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=b;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var l=2;l<s;l++)r[l]=n[l];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);