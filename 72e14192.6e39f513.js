(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{67:function(n,t,e){"use strict";e.r(t),e.d(t,"frontMatter",(function(){return a})),e.d(t,"metadata",(function(){return i})),e.d(t,"rightToc",(function(){return u})),e.d(t,"default",(function(){return l}));var r=e(2),c=e(6),o=(e(0),e(76)),a={title:"Quick-ish Start"},i={unversionedId:"quick-start",id:"quick-start",isDocsHomePage:!1,title:"Quick-ish Start",description:"`bash",source:"@site/docs/quick-start.md",slug:"/quick-start",permalink:"/quick-start",editUrl:"https://github.com/janovekj/fini/edit/master/site/docs/quick-start.md",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/"},next:{title:"Other resources",permalink:"/other-resources"}},u=[],s={rightToc:u};function l(n){var t=n.components,e=Object(c.a)(n,["components"]);return Object(o.b)("wrapper",Object(r.a)({},s,e,{components:t,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"npm install fini\n")),Object(o.b)("p",null,"Simple counter example (",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://codesandbox.io/s/fini-counter-example-ul43u?file=/src/App.tsx"}),"Codesandbox"),")"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),'import React from "react";\nimport { useMachine, Machine, State } from "fini";\n\n// Define a typed schema for the machine\ntype CounterMachine = Machine<\n  {\n    // Idle state which handles the `start` event\n    idle: State<{\n      start: never;\n    }>;\n    // Counting state which handles the `increment` and `set` events\n    counting: State<\n      {\n        increment: never;\n        // the `set` event comes with a number payload\n        set: number;\n      },\n      // Contextual data that is specific to,\n      // and only available in, the `counting` state\n      { count: number }\n    >;\n  },\n  // Context that is common for all states\n  { maxCount: number }\n>;\n\nconst App = () => {\n  const machine = useMachine<CounterMachine>(\n    {\n      idle: {\n        // Event handler function which transitions into\n        // the `counting` state, and sets the current count to 0\n        start: ({ context }) => ({\n          state: "counting",\n          context: {\n            ...context,\n            count: 0,\n          },\n        }),\n      },\n      counting: {\n        // Updates the context by incrementing the current count,\n        // if max count hasn\'t already been reached\n        increment: ({ context }) => ({\n          ...context,\n          count:\n            context.count === context.maxCount\n              ? context.count\n              : context.count + 1,\n        }),\n        set: ({ context }, count) => ({\n          ...context,\n          count,\n        }),\n      },\n    },\n    // The initial state and context\n    { state: "idle", context: { maxCount: 120 } }\n  );\n\n  return (\n    <div>\n      {\n        // Use the returned `machine` object to match states,\n        // read the context, and dispatch events\n        machine.idle && <button onClick={machine.start}>Start counting!</button>\n      }\n      {machine.counting && (\n        <div>\n          <p>{`Count: ${machine.context.count}`}</p>\n          <button onClick={machine.increment}>Increment</button>\n          <button onClick={() => machine.set(100)}>Set to 100</button>\n        </div>\n      )}\n    </div>\n  );\n};\n')))}l.isMDXComponent=!0},76:function(n,t,e){"use strict";e.d(t,"a",(function(){return p})),e.d(t,"b",(function(){return b}));var r=e(0),c=e.n(r);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function u(n,t){if(null==n)return{};var e,r,c=function(n,t){if(null==n)return{};var e,r,c={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(c[e]=n[e]);return c}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(c[e]=n[e])}return c}var s=c.a.createContext({}),l=function(n){var t=c.a.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},p=function(n){var t=l(n.components);return c.a.createElement(s.Provider,{value:t},n.children)},m={inlineCode:"code",wrapper:function(n){var t=n.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(n,t){var e=n.components,r=n.mdxType,o=n.originalType,a=n.parentName,s=u(n,["components","mdxType","originalType","parentName"]),p=l(e),d=r,b=p["".concat(a,".").concat(d)]||p[d]||m[d]||o;return e?c.a.createElement(b,i(i({ref:t},s),{},{components:e})):c.a.createElement(b,i({ref:t},s))}));function b(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var o=e.length,a=new Array(o);a[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=n,i.mdxType="string"==typeof n?n:r,a[1]=i;for(var s=2;s<o;s++)a[s]=e[s];return c.a.createElement.apply(null,a)}return c.a.createElement.apply(null,e)}d.displayName="MDXCreateElement"}}]);